import pandas as pd
import numpy as np

# Create DataFrames
data1 = {'header': ['A', 'B', 'C', 'D', 'E'],
         'count': [1, 2, 3, 4, 90]}
DF1 = pd.DataFrame(data1)

data2 = {'header': ['A', 'B', 'C', 'D', 'F'],
         'count': [1, 2, 678, 4, 34]}
DF2 = pd.DataFrame(data2)

# Perform an outer merge
merged_df = pd.merge(DF1, DF2, on='header', how='outer', suffixes=('_DF1', '_DF2'))

# Add a new column indicating match status
merged_df['match_status'] = merged_df.apply(
    lambda row: 'Invalid data' if (np.isnan(row['count_DF1']) and not np.isnan(row['count_DF2'])) or
                                   (not np.isnan(row['count_DF1']) and np.isnan(row['count_DF2'])) else
                                   ('Matched' if row['count_DF1'] == row['count_DF2'] else 'Mismatched'),
    axis=1
)

print(merged_df)


import pandas as pd

# Create a sample DataFrame
data = {'header': ['A', 'B', 'C', 'D', 'E'],
        'count': [1, 2, 3, 4, 90],
        'match_status': ['Matched', 'Matched', 'Mismatched', 'Matched', 'Invalid data']}
df = pd.DataFrame(data)

# Define a function to apply text color based on match status
def color_match_status(status):
    if status == 'Matched':
        return 'color: green'
    elif status == 'Mismatched':
        return 'color: red'
    elif status == 'Invalid data':
        return 'color: yellow'
    else:
        return ''

# Apply formatting to the 'match_status' column
styled_df = df.style.applymap(color_match_status, subset=['match_status'])

styled_df



#########33333333333333333

import pandas as pd
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
from reportlab.lib import colors

# Create a sample DataFrame
data = {'header': ['A', 'B', 'C', 'D', 'E'],
        'count': [1, 2, 3, 4, 90],
        'match_status': ['Matched', 'Matched', 'Mismatched', 'Matched', 'Invalid data']}
df = pd.DataFrame(data)

# Define a function to apply text color based on match status
def color_match_status(status):
    if status == 'Matched':
        return colors.green
    elif status == 'Mismatched':
        return colors.red
    elif status == 'Invalid data':
        return colors.yellow
    else:
        return colors.black

# Apply text color formatting to the DataFrame
styled_df = df.style.applymap(color_match_status, subset=['match_status'])

# Convert the styled DataFrame to an HTML table
html_table = styled_df.render()

# Create a PDF document
pdf_file = "colored_dataframe.pdf"
doc = SimpleDocTemplate(pdf_file, pagesize=letter)

# Convert the HTML table to a Table object
table = Table([html_table])

# Apply table style (optional)
table.setStyle(TableStyle([
    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
    ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
    ('GRID', (0, 0), (-1, -1), 1, colors.black)
]))

# Build the PDF document with the table
doc.build([table])

print(f"PDF saved as {pdf_file}")

##############4444444444444

import pandas as pd
import matplotlib.pyplot as plt
from pandas.plotting import table

# Create a sample DataFrame
data = {'header': ['A', 'B', 'C', 'D', 'E'],
        'count': [1, 2, 3, 4, 90],
        'match_status': ['Matched', 'Matched', 'Mismatched', 'Matched', 'Invalid data']}
df = pd.DataFrame(data)

# Define a function to apply text color based on match status
def color_match_status(val):
    if val == 'Matched':
        return 'color: green'
    elif val == 'Mismatched':
        return 'color: red'
    elif val == 'Invalid data':
        return 'color: yellow'
    else:
        return ''

# Apply text color formatting to the DataFrame
styled_df = df.style.applymap(color_match_status, subset=['match_status'])

# Create a plot with the styled DataFrame
fig, ax = plt.subplots(figsize=(8, 3))
tbl = table(ax, styled_df, loc='center', cellLoc='center')
tbl.auto_set_font_size(False)
tbl.set_fontsize(10)
tbl.scale(1.2, 1.2)
ax.axis('off')

# Save the plot as a PDF
pdf_file = "colored_dataframe.pdf"
plt.savefig(pdf_file, bbox_inches='tight')
plt.close()

print(f"PDF saved as {pdf_file}")
